#include "LongNumMod.hpp"
#include <gtest/gtest.h>

class LongNumberModTests : public ::testing::Test {
protected:
    LongNumberMod ln1;
    LongNumberMod ln2;

    LongNumber modulus;

    void SetUp() override {
        ln1 = LongNumber("23A6F9B50D34A7E071EC59F90C128E775FA3C0F3E1CDD13C963C64166D0DE107E98E1523DD70C92724A35E429E741E036655F4E4FA267D08079F4ABFB2D2F286AA6BCA5BFC1B135B0C3D6F4E53F5ED5381815");
        ln2 = LongNumber("7FD6C21CC86C06C7219C96A88141C47FEBEDD1B1742A9A2D9F4A15A8F9913088360E7313C8AA5DFA0009DFFCFB52B1C6EDBD39213D8E3F25FD40098F1CC5226D4AB6ED52FDADB34D7E4B85888C9422D");
        modulus = LongNumber("A12375575E389F92F9092269BC95DE062BE604204D3A5A85AD2C61B97DE3ADAABBA66D25E6742B42D0FE13607F2E3A72B05CD5CDDC58E748471DF10BD1CC0421DF8A0B10759282F94B84CF4CC0215085");
        ln1.initializeModulus(modulus);
    }
};

TEST_F(LongNumberModTests, AdditionOperator) {
    LongNumberMod ans = ln1 + ln2;
    EXPECT_EQ(ans.getNumHex(), "7E4D2B77B5E074AC74A0DD23A2E69BA335C7A4B4A552AFA46B94EE0AE071B2CAA961C052F74BD300E5103E68C8B14A19C9A84A7E07F2A76D945D07637262136EEC4A3760F2F71E6E317553DE2ED7D787");
}

TEST_F(LongNumberModTests, SubtractionOperator) {
    LongNumberMod ans = ln1 - ln2;
    EXPECT_EQ(ans.getNumHex(), "6E5253341CD2F3D3906D4A4E92BE63133849EA7E76CD5C5EB7ABAB55C13F8CB9A29FF1F07E368741A50F02692946F3E0EBF0A359E040DF88D4B506318EC96F2142F359B69341680481ABE32D1D45532D");
}

TEST_F(LongNumberModTests, MultiplicationOperator) {
    modulus = LongNumber("4CBD951272D13AC6DC265B5398DF00CC456AB6672B42A21F5ECF9D0FCEFCD379E7C753087E66782B4A91924B8E2805C513E0DB913173171FA4B182203F0C317DA4D4C25166F85E4CBDB7426289A75718ABF91DD6ABF83C5DBB9F76B9FF7FB8CB7D22C43D889D187810400F305DEFAC6AB25E059ED79B2E88E92B4A56BDEAF0D7A04A6D7F56495E91EF60D5EA411C043F3BD4BACCE912B43989D4B331655AD07EE192D502FC1D5A49128F3468FC0C818DDCA1F44A");
    ln1.initializeModulus(modulus);
    LongNumberMod ans = ln1 * ln2;
    EXPECT_EQ(ans.getNumHex(), "11CDBE7E1A4E2B947725536DCFB06D975C6FF2B93348176FF0CF438EF0B713C2BDF6D53DD0E8503014257D37008002103C1CFA2F8615E0AFF63165D4A661D8B2D6FC451B937A5FF8D296C107FD68AD92FE7D8BF0AEE1F0737FD5661D7D71F6EA6875684EA0B3EABC87BC30E5DE2A3B3E07A57A51FF33A4208830CD1C2CA626B53D88D9DFF5D0C6EC6BD0875CB6C4EF1221D477AC2F73AB32B8E1FBA92BB2018EA5B1");
}

TEST_F(LongNumberModTests, PowerOFOperator) {
    modulus = LongNumber("1294BB791A7FB2909C8BA6575060CA643BEB467788EC26B87549AD01C26638903B057412EDB81DB21B3C6AB83B61A94BB8795395B857CF3F9AE893382BB34625D03556415F29C74F99EDE7484A74003F7EB62C45E8856DE88230407A1FB697783499099E28D98DDE74F53693F57606D317624D671FED24BFD472F386B9DC4885E70F2730024001C6A4E4502411E5B32B5596866818F1BCD913220FAB644A8941BA8E5DC43580B53064501D626AC483E502C11A36542906CF44B4F4DB68CDCB1941AD416B4D8884100A11");
    ln1.initializeModulus(modulus);
    LongNumber ln3("104D4A301BD70480050C46201F6AA95018228D200F5CA420252");
    LongNumber ln4("100");

    LongNumberMod ans = ln3.toPowerOf(ln4);
    EXPECT_EQ(ans.getNumHex(), "BCB3F04A27531AFBD33471BC0D4D86B517D8A7407469CBB894719D3E2E7867A9F3F4E76C794B842CD7190AD00FB0151F8D80FE33B703CCDBA38AD82422027B6A4F12654E29D6E3E61D91FD4F686F7FCE481FBF9744A265322096E7FEB4459A71143BA25C97077EB041A60124CA0041A3DE5F076C9401000CF98E62FAEB823AF21446B6094C2F3E03B5CF316FE07B0D5B6CBE2C7AA19CF23D4EFBC97052D11AB564296717C0827F934090D525F8044A98F36B7AC8BF7B776B77B566EDA3E711EB2033E7758AD8DB5B953");
}