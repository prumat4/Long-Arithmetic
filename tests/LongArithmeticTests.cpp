#include "LongArithmetic.hpp"
#include <gtest/gtest.h>

class LongNumberTests : public ::testing::Test {
protected:

};

TEST_F(LongNumberTests, ConstructorFromHexString) {
    LongNumber num
    std::string hexStr = num2.toHexString();
    EXPECT_EQ(hexStr
}

TEST_F(LongNumberTests, EqualityOperator) {
    LongNumber num1("104D4A301BD70480050C46201F6AA95018228D200F5CA420252104D4A301BD70480050C46201F6AA95018228D200F5CA420252104D4A301BD70480050C46201F6AA95018228D200F5CA420252104D4A301BD70480050C46201F6AA95018228D200F5CA420252104D4A301BD70480050C46201F6AA95018228D200F5CA420252");
    LongNumber num3(num1);
    LongNumber num
    
    EXPECT_EQ(num1, num3);
    EXPECT_NE(num1, num2);
}

// TEST_F(LongNUmberTests, AdditionOperator) {

// }

// TEST_F(LongNUmberTests, SubstractionOperator) {
    
// }

// TEST_F(LongNUmberTests, MultiplicationOperator) {
    
// }

// TEST_F(LongNUmberTests, ToSquareOperator) {
    
// }


// TEST_F(LongNUmberTests, ToPowerOfOperator) {
    
// }

TEST_F(LongNumberTests, AdditionAndMultiplicationOperators) {
    LongNumber num1 ("104D4A301BD70480050C46201F6AA95018228D200F5CA420252");
    LongNumber num2;
    
    for(int i = 120; i > 0; i--) 
        num2 = num2 + num1;

    LongNumber temp(120);
    LongNumber num3 = num1 * temp;
    
    EXPECT_EQ(num3, num2);
}

TEST_F(LongNumberTests, LessThanOperator) {
    LongNumber num1("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF");
    LongNumber num2("80000000000000000000000000000000800000000000000000000000000000008000000000000000000000000000000");

    EXPECT_TRUE(num2 < num1);
}

TEST_F(LongNumberTests, GreaterThanOperator) {
    LongNumber num1("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF");
    LongNumber num2("80000000000000000000000000000000800000000000000000000000000000008000000000000000000000000000000");

    EXPECT_FALSE(num1 < num2);
}

TEST_F(LongNumberTests, SubtractionOperator) {
    LongNumber num
    LongNumber diff = num1 - num1;
    LongNumber expected(0);

    LongNumber num2 ("104D4A301BD70480050C46201F6AA95018228D200F5CA420252");
    LongNumber num3 = num1 + num2 - num2;
   
    EXPECT_EQ(diff, expected);
    EXPECT_EQ(num1, num3);
}

TEST_F(LongNumberTests, MultiplicationAndSquareOperator) {
    LongNumber num("104D4A301BD70480050C46201F6AA95018228D200F5CA420252104D4A301BD70480050C46201F6AA95018228D200F5CA4202");
    LongNumber product = num * num;
    LongNumber square = num.toSquare();
   
    EXPECT_EQ(product, square);
}

TEST_F(LongNumberTests, MultiplicationAndToPowerOfOperators) {
    LongNumber num1 ("104D4A301BD70480050C46201F6AA95018228D200F5CA420252");
    LongNumber num2(num1);
    LongNumber num3 = num2 * num2 * num2 * num2 *num2 * num2 *num2 * num2; 

    LongNumber power("8");
    LongNumber res = num1.toPowerOf(power);

    EXPECT_EQ(res, num3);
}

// TEST_F(LongNumberTests, DivisionOperator) {
//     LongNumber num
//     LongNumber num2 ("104D4A301BD70480050C46201F6AA95018228D200F5CA420252");
//     LongNumber quotient = num1 / num2;
//     LongNumber expected("3fcbd348ad916df2a080c6fcc1da73892dc4cc959e885d02ff4f94e9cd6e1a9097d046cf0003a7325678a71c52c03b4eaabf962e42f2aeabd3709cfbbf6c13dad24066b9da479fadf1b146c30c0e784be35319ce0c61b460fceefe6dc49a6e46cb616270f5b3701550fc1153cbac67b2b678afe21d2531313959ef23850aec56510d80c7a16aac57abb846d85b3724acdd6feaac654e768b27833fd798b9b9296baa3dda0acb5bf2870b115d927c6ff50323b6a6da9cd60d0574f42b8bcb3182215a26386387d91ff0d6cee14d728620fd3fa6cc1170ce0ed9b8b6c312778b1bb8910223");
//     EXPECT_EQ(quotient, expected);
// }


int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
